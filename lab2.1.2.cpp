/*Γράψτε ένα πρόγραμμα που διαγράφει επαναλαμβανόμενες καταχωρήσεις σε έναν πίνακα
χαρακτήρων. Το μέγεθος του πίνακα και οι καταχωρήσεις του πίνακα είναι δεδομένα που εισάγει
ο χρήστης από το πληκτρολόγιο. Μόλις σβηστούν όλα τα διπλότυπα, το πρόγραμμα θα ρωτάει
αν ο χρήστης θέλει να επαναλάβει τη διαδικασία για ένα νέο πίνακα χαρακτήρων και θα
επαναλαμβάνει την ίδια ερώτηση μέχρι ο χρήστης να εισάγει το χαρακτήρα Ν ή n (που
αντιπροσωπεύει το όχι).
Για το σκοπό αυτό, θα χρειαστεί να γράψετε τουλάχιστον 3 συναρτήσεις. Πρέπει να
χρησιμοποιήσετε τοπικές μεταβλητές- όχι global μεταβλητές. Επίσης, ΔΕΝ πρέπει να
χρησιμοποιείτε συμβολοσειρές τύπου c αλλά να χρησιμοποιείτε πίνακα χαρακτήρων.
Χρησιμοποιήστε κατάλληλα τα pass-by-reference και pass-by-value όπου χρειάζεται).
Περιγραφή της delete:
Αν βρείτε διπλότυπο χαρακτήρα, όλοι οι χαρακτήρες εκτός από την πρώτη εμφάνιση
πρέπει να διαγραφούν, ενώ πρέπει να μετακινήσετε χειροκίνητα τους υπόλοιπους χαρακτήρες
αριστερά έτσι ώστε ο αμέσως επόμενος χαρακτήρας να αντικαταστήσει τον διπλότυπο. Το
ακόλουθο παράδειγμα δείχνει την λειτουργία της delete.
Συναρτήσεις:
ReadArray: αυτή η συνάρτηση διαβάζει τόσο το μέγεθος του πίνακα όσο και τα στοιχεία του
πίνακα από το χρήστη
DeleteRepeats: Η συνάρτηση αυτή λαμβάνει έναν “μερικώς” συμπληρωμένο πίνακα
χαρακτήρων ως τυπική παράμετρο και διαγράφει όλους τους επαναλαμβανόμενους χαρακτήρες.
Δεδομένου ότι ένας μερικώς συμπληρωμένος πίνακας απαιτεί δύο ορίσματα, η συνάρτηση αυτή
θα έχει δύο παραμέτρους: μια παράμετρο πίνακα (char array[]) και μια παράμετρο ακέραιου
τύπου που δίνει τον αριθμό των θέσεων του πίνακα που χρησιμοποιούνται. Όταν διαγράφεται
ένα γράμμα, τα υπόλοιπα γράμματα μετακινούνται προς τα εμπρός για να γεμίσουν το κενό.
Αυτό θα δημιουργήσει κενές θέσεις (στο τέλος του πίνακα θέσεις που δεν χρειαζόμαστε πια),
έτσι ώστε να χρησιμοποιείται μικρότερο μέρος του πίνακα. Η παράμετρος που δηλώνει τον
αριθμό των θέσεων που χρησιμοποιούνται στον πίνακα, όπως καθώς και ο ίδιος ο πίνακας, θα
ενημερωθούν στη συνέχεια αναλόγως. Εκτυπώστε τον ενημερωμένο πίνακα μετά από κάθε
διαγραφή χαρακτήρα.
PrintArray: δέχεται δύο παραμέτρους (τον πίνακα και το χρησιμοποιούμενο μέγεθος του
πίνακα).*/

#include <iostream>
using namespace std;

void ReadArray(char* array, int size) {
    cout << "Input " << size << " characters: ";

    int length = 0;
    while (length < size) {
        char ch;
        cin.get(ch);

        if (ch == '\n') break;

        array[length] = ch;
        length++;
    }
    array[length] = '\0';
}

void PrintArray(char* array, int size) {
    cout << "Your array with size " << size << " is: ";
    for (int i = 0; i < size; ++i) {
        cout << array[i];
    }
    cout << endl;
}

int DeleteRepeats(char array[], int size) {
    for (int i = 0; i < size; ++i) {
        for (int j = i + 1; j < size; ++j) {
            if (array[i] == array[j]) {
                
                for (int k = j; k < size - 1; ++k) {
                    array[k] = array[k + 1];
                }
                size--;  
                j--;     
                PrintArray(array, size); 
            }
        }
    }
    return size;
}

int main() {
    int size;
    cout << "Input the size of your array: ";
    cin >> size;

    cin.ignore();

    char* array = new char[size + 1];

    ReadArray(array, size);
    PrintArray(array, size);

    size = DeleteRepeats(array, size);
    PrintArray(array, size);
    delete[] array;

    return 0;
}
